%YAML 1.2
---
file_extensions: [yasm, nasm, asm, inc, s]
scope: source.asm.x86_64

contexts:
  prototype:
    - include: comments

  main:
    - include: registers
    - include: mnemonics
    - include: constants
    - include: entities
    - include: support
    - include: comments
    #- include: preprocessor
    - include: strings

  constants:
    - match: \b((([0-9\_]+\.[0-9\_]*)(e[+-]?[0-9\_]+)?|\.?[0-9\_]+e[+-]?[0-9\_]+))\b
      scope: constant.numeric.floating-point
    - match: \b([0-9\_]+p[0-9\_]*)\b
      scope: constant.numeric.packed-bcd
    - match: (\$0[0-9a-f]+)\b
      scope: constant.numeric.literal
    - match: \b((0[by][01\_]+)|([01\_]+[by]))\b
      scope: constant.numeric.bin
    - match: \b((0[oq][0-7\_]+)|([0-7\_]+[oq]))\b
      scope: constant.numeric.oct
    - match: \b((0d[0-9\_]+)|([0-9\_]+d?))\b
      scope: constant.numeric.dec
    - match: \b((0[xh][0-9a-fA-F\_]+)|([0-9a-fA-F\_]+[hH]))\b
      scope: constant.numeric.hex

  entities:
    - match: '((section|segment)\s+)?\.((ro)?data|bss|text)'
      scope: entity.name.section
    - match: '^\s*(%%)?(\w|[\._?])(\w|[_$#@~\.?])*\:'
      scope: entity.name.function
    - match: '^\s*([$@~])(\w|[_$#@~\.?])*\:'
      scope: invalid.entity.name.function
    - match: \$
      scope: entity.label.special
    - match: ^\.?(globa?l|extern)\b
      scope: entity.directive
    - match: (\$\w+)\b
      scope: text.variable

  support:
    - match: (?i)\b(s?byte|([doqtyz]|dq|s[dq]?)?word|(d|res)[bdoqtwyz]?|ddq|incbin|equ|times|(end|i)?struc|at|iend)\b
      scope: support.type.asm
    - match: (?i)\b(\.?(alignb?|bits|cpu|fpu)|use(16|32|64))\b
      scope: support.directive.asm
    - match: \b(strict|nosplit|near|far|abs|rel|seg|wrt|absolute|common)\b
      scope: support.modifier.asm
    - match: \b([ao](16|32|64))\b
      scope: support.prefix.asm
    - match: \b__(utf((16|32)([lb]e)?)|float(8|16|32|64|80[me]|128[lh])|Infinity|[QS]?NaN)__\b
      scope: support.function.asm
 
  comments:
    - match: (;|(^|\s)#\s).*$
      scope: comment.line
#    - name: comment.block
#      begin: /\*
#      end: \*/
#    - name: comment.preprocessor
#      begin: ^\s*[\#%]\s*if\s+0\b
#      end: ^\s*[\#%]\s*endif\b

#  preprocessor:
#    - name: meta.preprocessor.diagnostic.c
#      begin: ^\s*[#%]\s*(error|warning)\b
#      end: $
#      captures:
#        '1': {name: keyword.control.import.error.c}
#      - match: (?>\\\s*\n)
#        scope: punctuation.separator.continuation.c
#    
#    - name: meta.preprocessor.c.include
#      begin: ^\s*[#%]\s*(include|import)\b\s+
#      end: (?=(?://|/\*))|$
#      captures:
#        '1': {name: keyword.control.import.include.c}
#      - match: (?>\\\s*\n)
#        scope: punctuation.separator.continuation.c
#      - name: string.quoted.double.include.c
#        begin: '"'
#        beginCaptures:
#          '0': {name: punctuation.definition.string.begin.c}
#        end: '"'
#        endCaptures:
#          '0': {name: punctuation.definition.string.end.c}
#      - name: string.quoted.other.lt-gt.include.c
#        begin: <
#        beginCaptures:
#          '0': {name: punctuation.definition.string.begin.c}
#        end: '>'
#        endCaptures:
#          '0': {name: punctuation.definition.string.end.c}
#    
#    - name: meta.preprocessor.c
#      begin: ^\s*[%#]\s*((xi?)?define|defined|elif(def)?|else|if(macro|ctx|idni?|num|str)?|ifn?def|line|(end)?macro|pragma|undef|endif)\b
#      end: (?=(?://|/\*))|$
#      captures:
#        '1': {name: keyword.control.import.c}
#      - match: (?>\\\s*\n)
#        name: punctuation.separator.continuation.c
#
#    - name: meta.preprocessor.nasm
#      begin: ^\s*[#%]\s*(assign|strlen|substr|(end|exit)?rep|push|pop)\b
#      end: $
#      captures:
#        '1': {name: keyword.control}
#      - match: (?>\\\s*\n)
#        scope: punctuation.separator.continuation.c
#
  # ref: http://www.nasm.us/doc/nasmdoc3.html#section-3.4.2
  strings:
    - match: '`'
      scope: string.quoted.other.asm.x86_64
      push: string_backquote
    - match: ''''
      scope: string.quoted.single.asm.x86_64
      push: string_single
    - match: '"'
      scope: string.quoted.double.asm.x86_64
      push: string_double

  string_content:
    - match: '\\u[0-9a-fA-F]{4}'
      scope: constant.character.escape.asm.x86_64
    - match: '\\U[0-9a-fA-F]{8}'
      scope: constant.character.escape.asm.x86_64
    - match: '\\x[0-9a-fA-F]{1,2}'
      scope: constant.character.escape.asm.x86_64
    - match: '\\[0-7]{1,3}'
      scope: constant.character.escape.asm.x86_64
    - match: '\\[''"`\\?abtnvfre]'
      scope: constant.character.escape.asm.x86_64
    - match: '\\.'
      scope: invalid.illegal.asm.x86_64
  string_backquote:
    - meta_scope: string.quoted.other.asm.x86_64
    - meta_include_prototype: false
    - include: string_content
    - match: '`'
      pop: true
  string_single:
    - meta_scope: string.quoted.single.asm.x86_64
    - meta_include_prototype: false
    - match: ''''
      pop: true
  string_double:
    - meta_scope: string.quoted.double.asm.x86_64
    - meta_include_prototype: false
    - match: '"'
      pop: true

  registers:
    - match: \b%?([abcd][hl]|[er]?[abcd]x|[er]?(di|si|bp|sp)|dil|sil|bpl|spl|r(8|9|1[0-5])[bdlw]?)\b
      scope: constant.language.registers.general-purpose
    - match: \b%?([cdefgs]s)\b
      scope: constant.language.registers.segment
    - match: \b%?([er]?flags)\b
      scope: constant.language.registers.flags
    - match: \b%?([er]?ip)\b
      scope: constant.language.registers.instruction-pointer
    - match: \b%?(cr[02-4])\b
      scope: constant.language.registers.control
    - match: \b%?((mm|st|fpr)[0-7])\b
      scope: constant.language.registers.mmx
    - match: \b%?([xy]mm([0-9]|1[0-5])|mxcsr)\b
      scope: constant.language.registers.sse_avx
    - match: \b%?(zmm([12]?[0-9]|30|31))\b
      scope: constant.language.registers.avx512
    - match: \b%?(bnd([0-3]|cfg[su]|status))\b
      scope: constant.language.registers.memory-protection
    - match: \b%?(([gil]dt)r?|tr)\b
      scope: constant.language.registers.system-table-pointer
    - match: \b%?(dr[0-367])\b
      scope: constant.language.registers.debug
    - match: \b%?(cr8|dr([89]|1[0-5])|efer|tpr|syscfg)\b
      scope: constant.language.registers.amd
    - match: \b%?(db[0-367]|t[67]|tr[3-7]|st)\b
      scope: invalid.deprecated

  mnemonics: # see valid.asm for references
    - include: mnemonics-general-purpose
    - include: mnemonics-fpu
    - include: mnemonics-mmx
    - include: mnemonics-sse
    - include: mnemonics-sse2
    - include: mnemonics-sse3
    - include: mnemonics-sse4
    - include: mnemonics-aesni
    - include: mnemonics-avx
    - include: mnemonics-avx2
    - include: mnemonics-tsx
    - include: mnemonics-system
    - include: mnemonics-64bit
    - include: mnemonics-vmx
    - include: mnemonics-smx
    - include: mnemonics-intel-isa-sgx
    - include: mnemonics-intel-isa-mpx
    - include: mnemonics-intel-isa-sha
    - include: mnemonics-supplemental-amd
    - include: mnemonics-supplemental-cyrix
    - include: mnemonics-supplemental-via
    - include: mnemonics-undocumented
    - include: mnemonics-future-intel
    - include: mnemonics-pseudo-ops
    #- include: mnemonics-invalid

  mnemonics-general-purpose:
    - match: \b(mov([sz]x)?|cmov(n?[abceglopsz]|n?[abgl]e|p[eo]))\b
      scope: keyword.mnemonic.general-purpose.data-transfer.mov
    - match: \b(xchg|bswap|xadd|cmpxchg(8b)?)\b
      scope: keyword.mnemonic.general-purpose.data-transfer.xchg
    - match: \b((push|pop)(ad?)?|cwde?|cdq|cbw)\b
      scope: keyword.mnemonic.general-purpose.data-transfer.other
    - match: \b(adcx?|adox|add|sub|sbb|i?mul|i?div|inc|dec|neg|cmp)\b
      scope: keyword.mnemonic.general-purpose.binary-arithmetic
    - match: \b(daa|das|aaa|aas|aam|aad)\b
      scope: keyword.mnemonic.general-purpose.decimal-arithmetic
    - match: \b(and|x?or|not)\b
      scope: keyword.mnemonic.general-purpose.logical
    - match: \b(s[ah][rl]|sh[rl]d|r[co][rl])\b
      scope: keyword.mnemonic.general-purpose.rotate
    - match: \b(set(n?[abceglopsz]|n?[abgl]e|p[eo]))\b
      scope: keyword.mnemonic.general-purpose.bit-and-byte.set
    - match: \b(bt[crs]?|bs[fr]|test|crc32|popcnt)\b
      scope: keyword.mnemonic.general-purpose.bit-and-byte.other
    - match: \b(jmp|jn?[abceglopsz]|jn?[abgl]e|jp[eo]|j[er]?cxz)\b
      scope: keyword.mnemonic.general-purpose.control-transfer.jmp
    - match: \b(loop(n?[ez])?|call|ret|iret[dq]?|into?|bound|enter|leave)\b
      scope: keyword.mnemonic.general-purpose.control-transfer.other
    - match: \b((mov|cmp|sca|lod|sto)(s[bdw]?)|rep(n?[ez])?)\b
      scope: keyword.mnemonic.general-purpose.strings
    - match: \b((in|out)(s[bdw]?)?)\b
      scope: keyword.mnemonic.general-purpose.io
    - match: \b((st|cl)[cdi]|cmc|[ls]ahf|(push|pop)f[dq]?)\b
      scope: keyword.mnemonic.general-purpose.flag-control
    - match: \b(l[defgs]s)\b
      scope: keyword.mnemonic.general-purpose.segment-registers
    - match: \b(lea|nop|ud2|xlatb?|cpuid|movbe)\b
      scope: keyword.mnemonic.general-purpose.misc
    - match: \b(rdrand|rdseed)\b
      scope: keyword.mnemonic.general-purpose.rng
    - match: \b(andn|bextr|bls(i|r|msk)|bzhi|pdep|pext|[lt]zcnt|(mul|ror|sar|shl|shr)x)\b
      scope: keyword.mnemonic.general-purpose.bmi

  mnemonics-fpu:
    - match: \b(fcmov(n?([beu]|be)))\b
      scope: keyword.mnemonic.fpu.data-transfer.mov
    - match: \b(f(i?(ld|stp?)|b(ld|stp)|xch))\b
      scope: keyword.mnemonic.fpu.data-transfer.other
    - match: \b(f((add|div|mul|sub)p?|i(add|div|mul|sub)|(div|sub)rp?|i(div|sub)r))\b
      scope: keyword.mnemonic.fpu.basic-arithmetic.basic
    - match: \b(f(prem1?|abs|chs|rndint|scale|sqrt|xtract))\b
      scope: keyword.mnemonic.fpu.basic-arithmetic.other
    - match: \b(f(u?com[ip]?p?|icomp?|tst|xam))\b
      scope: keyword.mnemonic.fpu.comparison
    - match: \b(f(sin|cos|sincos|pa?tan|2xm1|yl2x(p1)?))\b
      scope: keyword.mnemonic.fpu.transcendental
    - match: \b(fld(1|z|pi|l2[et]|l[ng]2))\b
      scope: keyword.mnemonic.fpu.load-constants
    - match: \b(f((inc|dec)stp|free|n?(init|clex|st[cs]w|stenv|save)|ld(cw|env)|rstor|nop)|f?wait)\b
      scope: keyword.mnemonic.fpu.control-management
    - match: \b(fx(save|rstor)(64)?)\b
      scope: keyword.mnemonic.fpu.state-management

  mnemonics-mmx:
    - match: \b(mov[dq])\b
      scope: keyword.mnemonic.mmx.data-transfer
    - match: \b(pack(ssdw|[su]swb)|punpck[hl](bw|dq|wd))\b
      scope: keyword.mnemonic.mmx.conversion
    - match: \b(p(((add|sub)(d|(u?s)?[bw]))|maddwd|mul[lh]w))\b
      scope: keyword.mnemonic.mmx.packed-arithmetic
    - match: \b(pcmp((eq|gt)[bdw]))\b
      scope: keyword.mnemonic.mmx.comparison
    - match: \b(pandn?|px?or)\b
      scope: keyword.mnemonic.mmx.logical
    - match: \b(ps([rl]l[dwq]|raw|rad))\b
      scope: keyword.mnemonic.mmx.shift-and-rotate
    - match: \b(emms)\b
      scope: keyword.mnemonic.mmx.state-management

  mnemonics-sse:
    - match: \b(mov(([ahlu]|hl|lh|msk)ps|ss))\b
      scope: keyword.mnemonic.sse.data-transfer
    - match: \b((add|div|max|min|mul|rcp|r?sqrt|sub)[ps]s)\b
      scope: keyword.mnemonic.sse.packed-arithmetic
    - match: \b(cmp[ps]s|u?comiss)\b
      scope: keyword.mnemonic.sse.comparison
    - match: \b((andn?|x?or)ps)\b
      scope: keyword.mnemonic.sse.logical
    - match: \b((shuf|unpck[hl])ps)\b
      scope: keyword.mnemonic.sse.shuffle-and-unpack
    - match: \b(cvt(pi2ps|si2ss|ps2pi|tps2pi|ss2si|tss2si))\b
      scope: keyword.mnemonic.sse.conversion
    - match: \b((ld|st)mxcsr)\b
      scope: keyword.mnemonic.sse.state-management
    - match: \b(p(avg[bw]|extrw|insrw|(max|min)(sw|ub)|sadbw|shufw|mulhuw|movmskb))\b
      scope: keyword.mnemonic.sse.simd-integer
    - match: \b(maskmovq|movntps|sfence)\b
      scope: keyword.mnemonic.sse.cacheability-control
    - match: \b(prefetch(nta|t[0-2]|w(t1)?))\b
      scope: keyword.mnemonic.sse.prefetch

  mnemonics-sse2:
    - match: \b(mov([auhl]|msk)pd)\b
      scope: keyword.mnemonic.sse2.data-transfer
    - match: \b((add|div|max|min|mul|sub|sqrt)[ps]d)\b
      scope: keyword.mnemonic.sse2.packed-arithmetic
    - match: \b((andn?|x?or)pd)\b
      scope: keyword.mnemonic.sse2.logical
    - match: \b((cmpp|u?comis)d)\b
      scope: keyword.mnemonic.sse2.compare
    - match: \b((shuf|unpck[hl])pd)\b
      scope: keyword.mnemonic.sse2.shuffle-and-unpack
    - match: \b(cvt(dq2pd|pi2pd|ps2pd|pd2ps|si2sd|sd2ss|ss2sd|t?(pd2dq|pd2pi|sd2si)))\b
      scope: keyword.mnemonic.sse2.conversion
    - match: \b(cvt(dq2ps|ps2dq|tps2dq))\b
      scope: keyword.mnemonic.sse2.packed-floating-point
    - match: \b(mov(dq[au]|q2dq|dq2q))\b
      scope: keyword.mnemonic.sse2.simd-integer.mov
    - match: \b(p((add|sub|(s[lr]l|mulu|unpck[hl]q)d)q|shuf(d|[hl]w)))\b
      scope: keyword.mnemonic.sse2.simd-integer.other
    - match: \b(clflush|[lm]fence|pause|maskmovdqu|movnt(dq|i|pd))\b
      scope: keyword.mnemonic.sse2.cacheability-control

  mnemonics-sse3:
    - match: \b(fisttp|lddqu|(addsub|h(add|sub))p[sd]|mov(sh|sl|d)dup|monitor|mwait)\b
      scope: keyword.mnemonic.sse3
    - match: \b(ph(add|sub)(s?w|d))\b
      scope: keyword.mnemonic.sse3.supplimental.horizontal-packed-arithmetic
    - match: \b(p((abs|sign)[bdw]|maddubsw|mulhrsw|shufb|alignr))\b
      scope: keyword.mnemonic.sse3.supplimental.other

  mnemonics-sse4:
    - match: \b(pmul(ld|dq)|dpp[ds])\b
      scope: keyword.mnemonic.sse4.1.arithmetic
    - match: \b(movntdqa)\b
      scope: keyword.mnemonic.sse4.1.load-hint
    - match: \b(blendv?p[ds]|pblend(vb|w))\b
      scope: keyword.mnemonic.sse4.1.packed-blending
    - match: \b(p(min|max)(u[dw]|s[bd]))\b
      scope: keyword.mnemonic.sse4.1.packed-integer
    - match: \b(round[ps][sd])\b
      scope: keyword.mnemonic.sse4.1.packed-floating-point
    - match: \b((extract|insert)ps|p((ins|ext)(r[bdq])))\b
      scope: keyword.mnemonic.sse4.1.insertion-and-extraction
    - match: \b(pmov([sz]x(b[dqw]|dq|wd|wq)))\b
      scope: keyword.mnemonic.sse4.1.conversion
    - match: \b(mpsadbw|phminposuw|ptest|pcmpeqq|packusdw)\b
      scope: keyword.mnemonic.sse4.1.other
    - match: \b(pcmp([ei]str[im]|gtq))\b
      scope: keyword.mnemonic.sse4.2

  mnemonics-aesni:
    - match: \b(aes((dec|enc)(last)?|imc|keygenassist)|pclmulqdq)\b
      scope: keyword.mnemonic.aesni

  mnemonics-avx:
    - match: \b(v((test|permil|maskmov)p[ds]|zero(all|upper)|(perm2|insert|extract|broadcast)f128|broadcasts[ds]))\b
      scope: keyword.mnemonic.avx
    - match: \b(vaes((dec|enc)(last)?|imc|keygenassist)|vpclmulqdq)\b
      scope: keyword.mnemonic.avx.promoted.aes
    - match: \b(v((cmp[ps]|u?comis)[ds]|pcmp([ei]str[im]|(eq|gt)[bdqw])))\b
      scope: keyword.mnemonic.avx.promoted.comparison
    - match: \b(v(cvt(dq2pd|dq2ps|pd2ps|ps2pd|sd2ss|si2sd|si2ss|ss2sd|t?(pd2dq|ps2dq|sd2si|ss2si))))\b
      scope: keyword.mnemonic.avx.promoted.conversion
    - match: \b(vh((add|sub)p[ds])|vph((add|sub)([dw]|sw)|minposuw))\b
      scope: keyword.mnemonic.avx.promoted.horizontal-packed-arithmetic
    - match: \b(v((andn?|x?or)p[ds]))\b
      scope: keyword.mnemonic.avx.promoted.logical
    - match: \b(v(mov(([ahl]|msk|nt|u)p[ds]|(hl|lh)ps|s([ds]|[hl]dup)|q)))\b
      scope: keyword.mnemonic.avx.promoted.mov
    - match: \b(v((add|div|mul|sub|max|min|round|sqrt)[ps][ds]|(addsub|dp)p[ds]|(rcp|rsqrt)[ps]s))\b
      scope: keyword.mnemonic.avx.promoted.packed-arithmetic
    - match: \b(v(pack[su]s(dw|wb)|punpck[hl](bw|dq|wd|qdq)|unpck[hl]p[ds]))\b
      scope: keyword.mnemonic.avx.promoted.packed-conversion
    - match: \b(vp(shuf([bd]|[hl]w))|vshufp[ds])\b
      scope: keyword.mnemonic.avx.promoted.packed-shuffle
    - match: \b(vp((abs|sign|(max|min)[su])[bdw]|(add|sub)([bdqw]|u?s[bw])|avg[bw]|extr[bdqw]|madd(wd|ubsw)|mul(hu?w|hrsw|l[dw]|u?dq)|sadbw))\b
      scope: keyword.mnemonic.avx.promoted.supplemental.arithmetic
    - match: \b(vp(andn?|x?or))\b
      scope: keyword.mnemonic.avx.promoted.supplemental.logical
    - match: \b(vpblend(vb|w))\b
      scope: keyword.mnemonic.avx.promoted.supplemental.blending
    - match: \b(vpmov(mskb|[sz]x(b[dqw]|w[dq]|dq)))\b
      scope: keyword.mnemonic.avx.promoted.supplemental.mov
    - match: \b(vp(insr[bdqw]|sll(dq|[dqw])|srl(dq)))\b
      scope: keyword.mnemonic.avx.promoted.simd-integer
    - match: \b(vp(sra[dw]|srl[dqw]))\b
      scope: keyword.mnemonic.avx.promoted.shift-and-rotate
    - match: \b(vblendv?p[ds])\b
      scope: keyword.mnemonic.avx.promoted.packed-blending
    - match: \b(vp(test|alignr))\b
      scope: keyword.mnemonic.avx.promoted.packed-other
    - match: \b(vmov(d(dup|qa|qu)?))\b
      scope: keyword.mnemonic.avx.promoted.simd-integer.mov
    - match: \b(v((extract|insert)ps|lddqu|(ld|st)mxcsr|mpsadbw))\b
      scope: keyword.mnemonic.avx.promoted.other
    - match: \b(v(maskmovdqu|movntdqa?))\b
      scope: keyword.mnemonic.avx.promoted.cacheability-control
    - match: \b(vcvt(ph2ps|ps2ph))\b
      scope: keyword.mnemonic.16-bit-floating-point-conversion
    - match: \b(vfn?m((add|sub)(132|213|231)[ps][ds])|vfm((addsub|subadd)(132|213|231)p[ds]))\b
      scope: keyword.mnemonic.fma

  mnemonics-avx2:
    - match: \b(v((broadcast|extract|insert|perm2)i128|pmaskmov[dq]|perm([dsq]|p[sd])))\b
      scope: keyword.mnemonic.avx2.promoted.simd
    - match: \b(vpbroadcast[bdqw])\b
      scope: keyword.mnemonic.avx2.promoted.packed
    - match: \b(vp(blendd|s[lr]lv[dq]|sravd))\b
      scope: keyword.mnemonic.avx2.blend
    - match: \b(vp?gather[dq][dq]|vgather([dq]|dq)p[ds])\b
      scope: keyword.mnemonic.avx2.gather

  mnemonics-tsx:
    - match: \b(x(abort|acquire|release|begin|end|test))\b
      scope: keyword.mnemonic.tsx

  mnemonics-system:
    - match: \b((cl|st)ac|[ls]([gli]dt|tr|msw)|clts|arpl|lar|lsl|ver[rw]|inv(d|lpg|pcid)|wbinvd)\b
      scope: keyword.mnemonic.system
    - match: \b(lock|hlt|rsm|(rd|wr)(msr|pkru|[fg]sbase)|rd(pmc|tscp?)|sys(enter|exit))\b
      scope: keyword.mnemonic.system
    - match: \b(x((save(c|opt|s)?|rstors?)(64)?|[gs]etbv))\b
      scope: keyword.mnemonic.system

  mnemonics-64bit:
    - match: \b(cdqe|cqo|(cmp|lod|mov|sto)sq|cmpxchg16b|mov(ntq|sxd)|scasq|swapgs|sys(call|ret))\b
      scope: keyword.mnemonic.64-bit-mode

  mnemonics-vmx:
    - match: \b(vm(ptr(ld|st)|clear|read|write|launch|resume|xo(ff|n)|call|func)|inv(ept|vpid))\b
      scope: keyword.mnemonic.vmx

  mnemonics-smx:
    - match: \b(getsec)\b
      scope: keyword.mnemonic.smx.getsec
    - match: \b(capabilities|enteraccs|exitac|senter|sexit|parameters|smctrl|wakeup)\b
      scope: support.constant

  mnemonics-intel-isa-sgx:
    - match: \be(add|block|create|dbg(rd|wr)|extend|init|ld[bu]|pa|remove|track|wb)\b
      scope: keyword.mnemonic.sgx1.supervisor
    - match: \be(enter|exit|getkey|report|resume)\b
      scope: keyword.mnemonic.sgx1.user
    - match: \be(aug|mod(pr|t))\b
      scope: keyword.mnemonic.sgx2.supervisor
    - match: \be(accept(copy)?|modpe)\b
      scope: keyword.mnemonic.sgx2.user

  mnemonics-intel-isa-mpx:
    - match: \b(bnd(mk|c[lnu]|mov|ldx|stx))\b
      scope: keyword.mnemonic.mpx

  mnemonics-intel-isa-sha:
    - match: \b(sha(1rnds4|256rnds2|1nexte|(1|256)msg[12]))\b
      scope: keyword.mnemonic.sha

  mnemonics-supplemental-amd:
    - match: \b(bl([cs](fill|ic?|msk)|cs)|t1mskc|tzmsk)\b
      scope: keyword.mnemonic.supplemental.amd.general-purpose
    - match: \b(clgi|int3|invlpga|iretw|skinit|stgi|vm(load|mcall|run|save)|monitorx|mwaitx)\b
      scope: keyword.mnemonic.supplemental.amd.system
    - match: \b([ls]lwpcb|lwp(ins|val))\b
      scope: keyword.mnemonic.supplemental.amd.profiling
    - match: \b(movnts[ds])\b
      scope: keyword.mnemonic.supplemental.amd.memory-management
    - match: \b(prefetch|clzero)\b
      scope: keyword.mnemonic.supplemental.amd.cache-management
    - match: \b((extr|insert)q)\b
      scope: keyword.mnemonic.supplemental.amd.sse4.a
    - match: \b(vfn?m((add|sub)[ps][ds])|vfm((addsub|subadd)p[ds]))\b
      scope: keyword.mnemonic.supplemental.amd.fma4
    - match: \b(vp(cmov|(comu?|rot|sh[al])[bdqw]|mac(s?s(d(d|q[hl])|w[dw]))|madcss?wd|perm))\b
      scope: keyword.mnemonic.supplemental.amd.xop.simd
    - match: \b(vph(addu?(b[dqw]|w[dq]|dq)|sub(bw|dq|wd)))\b
      scope: keyword.mnemonic.supplemental.amd.xop.simd-horizontal
    - match: \b(vfrcz[ps][ds]|vpermil2p[ds])\b
      scope: keyword.mnemonic.supplemental.amd.xop.other
    - match: \b(femms)\b
      scope: keyword.mnemonic.supplemental.amd.3dnow
    - match: \b(p(avgusb|(f2i|i2f)[dw]|mulhrw|swapd)|pf((p?n)?acc|add|max|min|mul|rcp(it[12])?|rsqit1|rsqrt|subr?))\b
      scope: keyword.mnemonic.supplemental.amd.3dnow.simd
    - match: \b(pfcmp(eq|ge|gt))\b
      scope: keyword.mnemonic.supplemental.amd.3dnow.comparison

  mnemonics-supplemental-cyrix:
    - match: \b((sv|rs)dc|(wr|rd)shr)\b
      scope: keyword.mnemonic.supplemental.cyrix

  mnemonics-supplemental-via:
    - match: \b(montmul)\b
      scope: keyword.mnemonic.supplemental.via
    - match: \b(x(store(rng)?|crypt(ecb|cbc|ctr|cfb|ofb)|sha(1|256)))\b
      scope: keyword.mnemonic.supplemental.via.padlock

  mnemonics-undocumented:
    - match: \b(ret[nf]|icebp|int1|smi)\b
      scope: keyword.mnemonic.undocumented

  mnemonics-future-intel:
    - include: mnemonics-future-intel-avx512
    - include: mnemonics-future-intel-opmask
    - include: mnemonics-future-intel-cet
    - include: mnemonics-future-intel-other

  mnemonics-future-intel-avx512:
    - match: \b(vblendm(pd|ps)|vpblendm[bdqw])\b
      scope: keyword.mnemonic.avx512.blend
    - match: \b(vbroadcast[fi](32x[248]|64x[24])|v(extract|insert)[fi](32x[48]|64x[24])|vshuf[fi](32x4|64x2)|vpbroadcastm(b2q|w2d))\b
      scope: keyword.mnemonic.avx512.bits-mov
    - match: \b(v(compress|expand)p[ds]|vp(compress|expand|conflict)[dq])\b
      scope: keyword.mnemonic.avx512.compress
    - match: \b(vcvt(t?p[sd]2(udq|u?qq)|(udq|u?qq)2p[ds]|t?s[ds]2usi|usi2s[ds]))\b
      scope: keyword.mnemonic.avx512.conversion
    - match: \b(v(fixupimm|fpclass|get(exp|mant)|range|(rcp|rsqrt)(14|28)|reduce|rndscale|scalef)([ps][ds]))\b
      scope: keyword.mnemonic.avx512.math
    - match: \b(v(exp2p[ds]|(scatter|(gather|scatter)pf[01])[dq]p[ds]))\b
      scope: keyword.mnemonic.avx512.math
    - match: \b(vmovdq(a(32|64)|u(8|16|32|64)))\b
      scope: keyword.mnemonic.avx512.simd-integer
    - match: \b(vp(andn?|x?or)[dq])\b
      scope: keyword.mnemonic.avx512.logical
    - match: \b(vpcmpu?[dqw])\b
      scope: keyword.mnemonic.avx512.packed-comparison
    - match: \b(vp(absq|(lzcnt|ternlog)[dq]|madd52[lh]uq|(max|min)[su]q|mullq))\b
      scope: keyword.mnemonic.avx512.packed-math
    - match: \b(vpmov(m2[bdqw]|[bdqw]2m|(u?s)?([qd][bw]|qd|wb)))\b
      scope: keyword.mnemonic.avx512.packed-mov
    - match: \b(vp(ro[rl]v?[dq]|scatter[dq][dq]))\b
      scope: keyword.mnemonic.avx512.packed-shift
    - match: \b(vptestn?m[bdqw])\b
      scope: keyword.mnemonic.avx512.packed-test
    - match: \b(vperm([bdw]|[it]2([bdwq]|p[ds])))\b
      scope: keyword.mnemonic.avx512.permutations
    - match: \b(valign[dq]|vdbpsadbw|vpmultishiftqb|vpsrav[dqw])\b
      scope: keyword.mnemonic.avx512.other

  mnemonics-future-intel-opmask:
    - match: \b(k(add|andn?|(xn?)?or|mov|not|(or)?test|shift[lr])[bdqw]|kunpck(bw|wd|dq))\b
      scope: keyword.mnemonic.opmask

  mnemonics-future-intel-cet:
    - match: \b((inc|save|rstor)ssp|wru?ss|(set|clr)ssbsy|endbranch|endbr(32|64))\b
      scope: keyword.mnemonic.cet

  mnemonics-future-intel-other:
    - match: \b(clflushopt|clwb|pcommit)\b
      scope: keyword.mnemonic.other

  mnemonics-pseudo-ops:
    - match: \b(cmp(n?(eq|lt|le)|(un)?ord)[ps][ds])\b
      scope: keyword.pseudo-mnemonic.sse2.compare
    - match: \b(v?pclmul([hl]q[hl]q|[hl]qh)dq)\b
      scope: keyword.pseudo-mnemonic.avx.promoted.aes
    - match: \b(vcmp(eq(_(os|uq|us))?|neq(_(oq|os|us))?|[gl][et](_oq)?|n[gl][et](_uq)?|(un)?ord(_s)?|false(_os)?|true(_us)?)[ps][ds])\b
      scope: keyword.pseudo-mnemonic.avx.promoted.comparison
    - match: \b(vpcom(n?eq|[gl][et]|false|true)(b|uw))\b
      scope: keyword.pseudo-mnemonic.supplemental.amd.xop.simd

  mnemonics-invalid:
    - include: mnemonics-invalid-amd-sse5

  mnemonics-invalid-amd-sse5:
    - match: \b(com[ps][ds]|pcomu?[bdqw])\b
      scope: invalid.keyword.mnemonic.sse5.comparison
    - match: \b(cvtp(h2ps|s2ph)|frcz[ps][ds])\b
      scope: invalid.keyword.mnemonic.sse5.conversion
    - match: \b(fn?m((add|sub)[ps][ds])|ph(addu?(b[dqw]|w[dq]|dq)|sub(bw|dq|wd))|pma(css?(d(d|q[hl])|w[dw])|dcss?wd))\b
      scope: invalid.keyword.mnemonic.sse5.packed-arithmetic
    - match: \b(pcmov|permp[ds]|pperm|prot[bdqw]|psh[al][bdqw])\b
      scope: invalid.keyword.mnemonic.sse5.simd-integer
...